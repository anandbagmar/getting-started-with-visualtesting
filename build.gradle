import org.codehaus.groovy.runtime.GStringImpl
import java.text.SimpleDateFormat

buildscript {
    ext {
        gradleVersion = '8.7'
        junitVersion = '5.11.0-M2'
        applitoolsVersion = '5.69.1'
        applitoolsImagesVersion = '5.69.1'
        pdfBoxVersion = '3.0.2'
        cucumberJVMVersion = '7.18.0'
        assertJVersion = "3.26.0"
    }
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

plugins {
    id "java"
    id "idea"
}

idea {
    module {
        // if you hate browsing Javadoc
        downloadJavadoc = false
        // and love reading sources :)
        downloadSources = true
    }
}
version '0.0.1'

repositories {
//    mavenLocal()
    mavenCentral()
}

compileJava { options.encoding = "UTF-8" }

dependencies {
    implementation "org.junit.jupiter:junit-jupiter:$project.junitVersion"
    implementation "com.applitools:eyes-selenium-java5:$project.applitoolsVersion"
    implementation("com.applitools:eyes-images-java5:$project.applitoolsImagesVersion") {
        exclude group: 'com.applitools', module: 'eyes-sdk-core-java5'
    }
    implementation "org.apache.pdfbox:pdfbox:$project.pdfBoxVersion"
    implementation "io.cucumber:cucumber-java:$project.cucumberJVMVersion"
    implementation "io.cucumber:cucumber-testng:$project.cucumberJVMVersion"
    implementation "org.assertj:assertj-core:$project.assertJVersion"
}

static def getCurrentDatestamp() {
    Date today = new Date()
    SimpleDateFormat df = new SimpleDateFormat("dd-MMM")
    return df.format(today)
}

static def getMonth() {
    Date today = new Date()
    SimpleDateFormat df = new SimpleDateFormat("MMM-yyyy")
    return df.format(today)
}

static def getCurrentTimestamp() {
    Date today = new Date()
    SimpleDateFormat df = new SimpleDateFormat("HH-mm-ss")
    return df.format(today)
}

project.ext.logDir = "${rootDir}/reports/" + getMonth() + "/" + getCurrentDatestamp() + "/" + getCurrentTimestamp() as GStringImpl

test {
    doFirst {
        environment "APPLITOOLS_DONT_CLOSE_BATCHES", "true"
        environment "APPLITOOLS_LOG_DIR", "${project.logDir}/applitools_logs"
    }
    useJUnitPlatform() {
        reports {
            html.required.set(true)
            junitXml.required.set(true)
            html.outputLocation.set(file("$project.logDir/html"))
            junitXml.outputLocation.set(file("$project.logDir/junit"))
        }
        reports.junitXml.outputPerTestCase(true)
        testLogging {
            events "started", "passed", "skipped", "failed"
            // show standard out and standard error of the test JVM(s) on the console
            showStandardStreams = true
            // show full exception trace
            exceptionFormat = 'full'
            showStackTraces = true
            showCauses = true
            showExceptions = true
        }
        println("Log directory: ${project.logDir}")
        println("Debug mode: " + System.getProperty('debug', 'false'))
        // attach debugger
        if (System.getProperty('debug', 'false') == 'true') {
            println("In debug mode")
            jvmArgs '-Xdebug', '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,' + 'address=*:5005'
        }
    }
}

clean.doFirst {
    delete "${rootDir}/target"
    delete "${rootDir}/bin"
    delete "${rootDir}/build"
    delete "${rootDir}/out"
    println "Clean: Deleted bin, build, out, target and reports directories"
}

clean.doLast {
    mkdir "${rootDir}/reports"
    println "Created reports directory"
}

wrapper {
    gradleVersion = project.gradleVersion // version from gradle.properties
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

task cukes() {
    dependsOn assemble, testClasses
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            environment "APPLITOOLS_DONT_CLOSE_BATCHES", "true"
            environment "APPLITOOLS_LOG_DIR", "${project.logDir}/applitools_logs"
            def tags = System.getenv("CUCUMBER_FILTER_TAGS")==null ? "not @wip" : System.getenv("CUCUMBER_FILTER_TAGS") + " not @wip"
            environment "CUCUMBER_FILTER_TAGS", tags
            args = [
                    '--plugin', 'pretty',
                    '--plugin', "html:${project.logDir}/cucumber-report.html",
                    '--glue', 'tests.cukes.steps',
                    '--threads', '4', // Adjust the number of threads as needed
                    'src/test/resources/cukes']
        }
    }
}
